import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.*;

import java.util.Random;

public class PasswordGeneratorGUI {

    private static final String CHAR_LOWER = "abcdefghijklmnopqrstuvwxyz";
    private static final String CHAR_UPPER = CHAR_LOWER.toUpperCase();
    private static final String NUMBER = "0123456789";
    private static final String SPECIAL_CHARS = "!@#$%&*()_+-=[]|,./?><";

    private static final String DATA_FOR_RANDOM_STRING = CHAR_LOWER + CHAR_UPPER + NUMBER + SPECIAL_CHARS;
    private static Random random = new Random();

    private Text lengthField;
    private Button generateButton;
    private Label passwordLabel;

    public static void main(String[] args) {
        new PasswordGeneratorGUI().run();
    }

    public void run() {
        Display display = new Display();
        Shell shell = new Shell(display);
        shell.setText("Password Generator");
        shell.setLayout(new GridLayout(2, false));

        Label lengthLabel = new Label(shell, SWT.NONE);
        lengthLabel.setText("Password Length:");

        lengthField = new Text(shell, SWT.BORDER);

        generateButton = new Button(shell, SWT.PUSH);
        generateButton.setText("Generate Password");
        generateButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                generatePassword();
            }
        });

        passwordLabel = new Label(shell, SWT.WRAP);

        GridData gridData = new GridData(SWT.FILL, SWT.CENTER, true, false);
        gridData.horizontalSpan = 2;
        passwordLabel.setLayoutData(gridData);

        shell.pack();
        shell.open();

        while (!shell.isDisposed()) {
            if (!display.readAndDispatch()) {
                display.sleep();
            }
        }

        display.dispose();
    }

    private void generatePassword() {
        String lengthText = lengthField.getText();
        try {
            int length = Integer.parseInt(lengthText);
            String password = generatePassword(length);
            passwordLabel.setText("Generated Password: " + password);
        } catch (NumberFormatException ex) {
            passwordLabel.setText("Invalid password length");
        }
    }

    private static String generatePassword(int length) {
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int randomCharIndex = random.nextInt(DATA_FOR_RANDOM_STRING.length());
            char randomChar = DATA_FOR_RANDOM_STRING.charAt(randomCharIndex);
            sb.append(randomChar);
        }
        return sb.toString();
    }
}
